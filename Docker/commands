# Usando Docker para desarrollar aplicaciones
git clone https://github.com/platzi/docker
docker build platziapp . (creo la imagen local)
docker image ls (listo las imagenes locales)
docker run --rm -p 3000:3000 platziapp (creo el contenedor y cuando se detenga se borra, lo publica el puerto 3000)
docker ps (veo los contenedores activos)

# Aprovechando el caché de capas para estructurar correctamente tus imágenes
docker build platziapp . (creo la imagen local)
docker run --rm -p 3000:3000 -v pathlocal/index.js:pathcontenedor/index.js platziapp (corro un contenedor y monto el archivo index.js para que se actualice dinámicamente con nodemon que está declarado en mi Dockerfile)

# Docker networking: colaboración entre contenedores
docker network ls (listo las redes)
docker network create --atachable plazinet (creo la red)
docker inspect plazinet (veo toda la definición de la red creada)
docker run -d --name db mongo (creo el contenedor de la BBDD)
docker network connect plazinet db (conecto el contenedor “db” a la red “platzinet”)
docker run -d -name app -p 3000:3000 --env MONGO_URL=mondodb://db:27017/test platzi (corro el contenedor “app” y le paso una variable)
docker network connect plazinet app (conecto el contenedor “app” a la red “plazinet”)

# Subcomandos de Docker Compose
docker network ls (listo las redes)
docker network inspect docker_default (veo la definición de la red)
docker-compose logs (veo todos los logs)
docker-compose logs app (solo veo el log de “app”)
docker-compose logs -f app (hago un follow del log de app)
docker-compose exec app bash (entro al shell del contenedor app)
docker-compose ps (veo los contenedores generados por docker compose)
docker-compose down (borro todo lo generado por docker compose)

# Docker Compose como herramienta de desarrollo
docker-compose build (crea las imágenes)
docker-compose up -d (crea los servicios/contenedores)
docker-compose logs app (veo los logs de “app”)
docker-compose logs -f app (hago un follow de los logs de “app”)

# Compose en equipo: override
touch docker-compose.override.yml (creo el archivo override)
docker-compose up -d (crea los servicios/contenedores)
docker-compose exec app bash (entro al bash del contenedor app)
docker-compose ps (veo los contenedores del compose)
docker-compose up -d --scale app=2 (escalo dos instancias de app, previamente tengo que definir un rango de puertos en el archivo compose)
docker-compose down (borro todo lo creado con compose)

# Administrando tu ambiente de Docker
docker ps -a (veo todos los contenedores de mi máquina)
docker container prune (borra todos los contenedores inactivos)
docker rm -f $(docker ps -aq) (borra todos los contenedores que estén corriendo o apagados)
docker network ls (lista todas las redes)
docker volume ls (lista todos los volumes)
docker image ls (lista todas las imágenes)
docker system prune (borra todo lo que no se esté usando)
docker system prune -a (borra todo lo que esté en uso y no)
docker image rm -f $(docker image ls -q) (Eliminar todas las imágenes)
docker run -d --name app --memory 1g platziapp (limito el uso de memoria)
docker stats (veo cuantos recursos consume docker en mi sistema)
docker inspect app (puedo ver si el proceso muere por falta de recursos)

# Deteniendo contenedores correctamente: SHELL vs. EXEC
docker build -t loop . (construyo la imagen)
docker run -d --name looper loop (corro el contenedor)
docker stop looper (le envía la señal SIGTERM al contenedor)
docker ps -l (muestra el ps del último proceso)
docker kill looper (le envía la señal SIGKILL al contenedor)
docker exec looper ps -ef (veo los procesos del contenedor)

# Contenedores ejecutables: ENTRYPOINT vs CMD
docker build -t ping . (construyo la imagen)
docker run --name pinger ping <hostname> (ahora le puedo pasar un parámetro, previamente tengo que agregar el ENTRYPOINT en el Dockerfile)

# El contexto de build
docker build -t prueba . (creo la imagen)
docker run -d --rm --name app prueba (corro el contenedor)

en el archivo .dockerignore puedo poner todo lo que no quiero que copie del contexto de build
docker exec -it app bash (entro al contenedor y verifico que no se haya copiado lo que está en el .dockerignore)

# Multi-stage build
docker build -t prodapp -f build/production.Dockerfile . (ahora le especifíco el Dockerfile)
docker run -d --name prod prodapp
docker exec -it prod bash

# Docker-in-Docker
docker run -it --rm -v //var/run/docker.sock:/var/run/docker.sock docker:latest
docker run --rm -it -v //var/run/docker.sock:/var/run/docker.sock -v $(wich docker):/bin/docker wagoodman/dive:latest prodapp